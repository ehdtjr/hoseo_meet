
=== Ruff Check: Initial Issues ===
All checks passed!

=== Ruff Check: Applying Fixes ===
All checks passed!

=== Ruff Check: Remaining Issues ===
All checks passed!

=== Ruff Format: Proposed Changes ===
--- app/tests/service/test_email.py
+++ app/tests/service/test_email.py
@@ -15,8 +15,9 @@
     def setUp(self, mock_send_email):
         self.template_render = Mock()
         self.verification_service = AsyncMock()
-        self.email_service = EmailService(self.template_render,
-                                          self.verification_service)
+        self.email_service = EmailService(
+            self.template_render, self.verification_service
+        )
         self.mock_send_email = mock_send_email
 
     def test_validate_email_domain(self):
@@ -24,8 +25,7 @@
         self.assertTrue(self.email_service.validate_email_domain(valid_email))
 
         invalid_email = "user@invalid.com"
-        self.assertFalse(
-            self.email_service.validate_email_domain(invalid_email))
+        self.assertFalse(self.email_service.validate_email_domain(invalid_email))
 
     @patch("app.utils.email.send_email", new_callable=AsyncMock)
     async def test_send_email_verification_link(self, mock_send_email):
@@ -44,7 +44,7 @@
         self.template_render.render_template.assert_called_once_with(
             "new_register.html",
             verification_link=f"http://{settings.DOMAIN}:8000/api/v1/auth/verify-email?token={token}",
-            user=user
+            user=user,
         )
 
         # 이메일 발송 확인
@@ -56,8 +56,7 @@
 class TestEmailVerificationService(unittest.IsolatedAsyncioTestCase):
     def setUp(self):
         self.jwt_strategy = AsyncMock(spec=JWTStrategy)
-        self.email_verification_service = EmailVerificationService(
-            self.jwt_strategy)
+        self.email_verification_service = EmailVerificationService(self.jwt_strategy)
         self.user_manager = AsyncMock(spec=BaseUserManager)
 
     async def test_create_verification_token(self):
@@ -65,8 +64,7 @@
         expected_token = "mocked_token"
         self.jwt_strategy.write_token.return_value = expected_token
 
-        token = await self.email_verification_service.create_verification_token(
-            user)
+        token = await self.email_verification_service.create_verification_token(user)
 
         self.assertEqual(token, expected_token)
         self.jwt_strategy.write_token.assert_awaited_once_with(user)
@@ -76,21 +74,25 @@
         user = Mock(spec=UserProtocol)
         self.jwt_strategy.read_token.return_value = user
 
-        result = await self.email_verification_service.verify_email_token(token,
-                                                                          self.user_manager)
+        result = await self.email_verification_service.verify_email_token(
+            token, self.user_manager
+        )
 
         self.assertEqual(result, user)
-        self.jwt_strategy.read_token.assert_awaited_once_with(token,
-                                                              user_manager=self.user_manager)
+        self.jwt_strategy.read_token.assert_awaited_once_with(
+            token, user_manager=self.user_manager
+        )
 
     async def test_verify_email_token_invalid(self):
         token = "invalid_token"
         self.jwt_strategy.read_token.return_value = None
 
         with self.assertRaises(Exception) as context:
-            await self.email_verification_service.verify_email_token(token,
-                                                                     self.user_manager)
+            await self.email_verification_service.verify_email_token(
+                token, self.user_manager
+            )
 
         self.assertEqual(str(context.exception), "Invalid token")
-        self.jwt_strategy.read_token.assert_awaited_once_with(token,
-                                                              user_manager=self.user_manager)
\ No newline at end of file
+        self.jwt_strategy.read_token.assert_awaited_once_with(
+            token, user_manager=self.user_manager
+        )

--- app/tests/utils/test_email.py
+++ app/tests/utils/test_email.py
@@ -27,4 +27,4 @@
         self.assertEqual(message_instance.subject, test_subject)
         self.assertEqual(message_instance.recipients, [test_email])
         self.assertEqual(message_instance.body, test_body)
-        self.assertEqual(message_instance.subtype, MessageType.html)
\ No newline at end of file
+        self.assertEqual(message_instance.subtype, MessageType.html)

2 files would be reformatted, 30 files already formatted

=== Ruff Format: Applying Changes ===
2 files reformatted, 30 files left unchanged

=== Ruff Format: Verification ===
32 files already formatted
